#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('websocket:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var users = [];

var server = http.createServer(app);
 
var io = require('socket.io')(server);

io.on('connection', socket => {

  socket.on('join', (username, id) => {
    if(users.find(item => item.username === username)){
      io.emit('conflict'+id, username);
    }else{
      socket.username = username;
      socket.userid = id;
      users.push({id: id, username: username});
      io.emit('userjoin', username, socket.userid, users);
    }
  });

  socket.on('inputing', () => {
    io.emit('inputing', socket.userid);
  });

  socket.on('chat', msg => {
    io.emit('chat', {
      username: socket.username,
      id: socket.userid,
      msg: msg,
      time: (new Date).toLocaleString()
    });
  });

  socket.on('disconnect', () => {
    var id = socket.userid;
    var index = users.findIndex(item => item.id === id);
    if(index > -1){
      var username = users[index].username;
      users.splice(index, 1);
      io.emit('userout', id, username, users.length);
    }
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
