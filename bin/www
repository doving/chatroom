#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('websocket:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var users = [
  /*{id: 'xxx', nickname: 'xxx'}*/
];

var server = http.createServer(app);
 
var io = require('socket.io')(server);

var socketMap = {};

io.on('connection', socket => {

  socket.on('login', user => {
    if(users.find(item => item.nickname === user.nickname)){
      socket.emit('conflict', user.nickname);
    }else{
      var id = socket.id;
      var user = {id: id, nickname: user.nickname, head: user.head};
      socket.emit('logined', {
        myself: user,
        users: users
      });

      users.push(user);
      socket.broadcast.emit('userJoin', user);
      
    }
  });

  socket.on('inputing', () => {
    io.emit('inputing', socket.userid);
  });

  socket.on('chat', msg => {
    io.emit('chat', {
      nickname: socket.nickname,
      id: socket.userid,
      msg: msg,
      time: new Date - 0
    });
  });

  socket.on('startprivate', data => {
    var room = data.room;
    if(!room){
      room = socket.userid + data.id;
      socket.join(room);
      socketMap[data.id].join(room);

      io.to(room).emit('joinroom', {
        room: room,
        id: [socket.userid, data.id]
      });
    }   
  });

  socket.on('private', data => {
    var room = data.room;
    io.to(room).emit('private', {
      nickname: socket.nickname,
      id: socket.userid,
      msg: msg,
      time: new Date - 0,
      room: room
    }); 
  });

  socket.on('disconnect', () => {
    var id = socket.id;
    var index = users.findIndex(item => item.id === id);
    if(index > -1){
      var nickname = users[index].nickname;
      users.splice(index, 1);
      io.emit('userout', id, nickname, users.length);
      delete socketMap[id];
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
